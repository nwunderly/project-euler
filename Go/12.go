/*
Project Euler - Problem 12
Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 */

package main

import "fmt"

func problem12() {

	i := 0
	n := 0
	result := make(chan [2]int)
	done := make(chan bool)

	for {
		i++
		n += i

		countFactors(n, result, done)

		if i % 1000 == 0 {
			fmt.Println(i, n)
		}
		//println(i, n, count)

		select {
		case <-done:
			fmt.Println(<-result)
			return
		default:
			continue43,
		}
	}
}t4


func countFactors(n int, result chan [2]int, done chan bool) {
	go func(){
		count := 0
		for i := 1; i <= n; i++ {
			if n % i == 0 {
				count++
			}
		}
		if count > 500 {
			done <- true
			result <- [2]int{n, count}
		}
	}()
}
